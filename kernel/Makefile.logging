# IKOS Logging & Debugging Service - Build Configuration
# Makefile for building and testing the logging system

CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -g -O2 -D_GNU_SOURCE
INCLUDES = -I../include
LIBS = -lpthread -lm
LDFLAGS = 

# Directories
KERNEL_DIR = ../kernel
INCLUDE_DIR = ../include
BUILD_DIR = ../build
TESTS_DIR = ../tests

# Source files
LOGGING_SOURCES = \
	$(KERNEL_DIR)/logging_debug_core.c \
	$(KERNEL_DIR)/logging_debug_symbols.c \
	$(KERNEL_DIR)/logging_debug_outputs.c

# Object files
LOGGING_OBJECTS = $(LOGGING_SOURCES:$(KERNEL_DIR)/%.c=$(BUILD_DIR)/%.o)

# Test files
TEST_SOURCES = $(TESTS_DIR)/test_logging_debug.c
TEST_OBJECTS = $(TEST_SOURCES:$(TESTS_DIR)/%.c=$(BUILD_DIR)/%.o)

# Targets
.PHONY: all clean test install check-syntax

all: $(BUILD_DIR)/liblogging_debug.a $(BUILD_DIR)/test_logging_debug

# Static library
$(BUILD_DIR)/liblogging_debug.a: $(LOGGING_OBJECTS)
	@echo "Creating static library: $@"
	@mkdir -p $(BUILD_DIR)
	ar rcs $@ $^
	ranlib $@

# Test executable
$(BUILD_DIR)/test_logging_debug: $(TEST_OBJECTS) $(BUILD_DIR)/liblogging_debug.a
	@echo "Linking test executable: $@"
	@mkdir -p $(BUILD_DIR)
	$(CC) $(LDFLAGS) $^ $(LIBS) -o $@

# Object files
$(BUILD_DIR)/%.o: $(KERNEL_DIR)/%.c $(INCLUDE_DIR)/logging_debug.h
	@echo "Compiling: $<"
	@mkdir -p $(BUILD_DIR)
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(BUILD_DIR)/%.o: $(TESTS_DIR)/%.c $(INCLUDE_DIR)/logging_debug.h
	@echo "Compiling test: $<"
	@mkdir -p $(BUILD_DIR)
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Run tests
test: $(BUILD_DIR)/test_logging_debug
	@echo "Running logging and debugging tests..."
	@mkdir -p /tmp/ikos_test_logs
	$(BUILD_DIR)/test_logging_debug

# Check syntax without building
check-syntax:
	@echo "Checking syntax..."
	$(CC) $(CFLAGS) $(INCLUDES) -fsyntax-only $(LOGGING_SOURCES) $(TEST_SOURCES)

# Install headers and library
install: $(BUILD_DIR)/liblogging_debug.a
	@echo "Installing logging library..."
	@mkdir -p /usr/local/include/ikos
	@mkdir -p /usr/local/lib
	cp $(INCLUDE_DIR)/logging_debug.h /usr/local/include/ikos/
	cp $(BUILD_DIR)/liblogging_debug.a /usr/local/lib/
	@echo "Installation complete"

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	rm -f $(BUILD_DIR)/logging_debug_*.o
	rm -f $(BUILD_DIR)/test_logging_debug*.o
	rm -f $(BUILD_DIR)/liblogging_debug.a
	rm -f $(BUILD_DIR)/test_logging_debug
	rm -f /tmp/ikos_test*.log
	@echo "Clean complete"

# Debug build
debug: CFLAGS += -DDEBUG -O0
debug: all

# Release build
release: CFLAGS += -DNDEBUG -O3
release: all

# Static analysis
analyze:
	@echo "Running static analysis..."
	cppcheck --enable=all --std=c99 $(LOGGING_SOURCES) $(TEST_SOURCES)

# Memory check with valgrind
memcheck: $(BUILD_DIR)/test_logging_debug
	@echo "Running memory check..."
	valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
		$(BUILD_DIR)/test_logging_debug

# Performance profiling
profile: $(BUILD_DIR)/test_logging_debug
	@echo "Running performance profile..."
	perf record -g $(BUILD_DIR)/test_logging_debug
	perf report

# Code coverage
coverage: CFLAGS += --coverage
coverage: LDFLAGS += --coverage
coverage: $(BUILD_DIR)/test_logging_debug
	@echo "Running code coverage..."
	$(BUILD_DIR)/test_logging_debug
	gcov $(LOGGING_SOURCES)
	lcov --capture --directory . --output-file coverage.info
	genhtml coverage.info --output-directory coverage_html

# Documentation generation
docs:
	@echo "Generating documentation..."
	doxygen Doxyfile

# Benchmark
benchmark: $(BUILD_DIR)/test_logging_debug
	@echo "Running benchmarks..."
	$(BUILD_DIR)/test_logging_debug --benchmark

# Help
help:
	@echo "Available targets:"
	@echo "  all       - Build library and tests"
	@echo "  test      - Run test suite"
	@echo "  clean     - Remove build artifacts"
	@echo "  debug     - Build with debug symbols"
	@echo "  release   - Build optimized release"
	@echo "  analyze   - Run static analysis"
	@echo "  memcheck  - Run memory leak detection"
	@echo "  profile   - Run performance profiling"
	@echo "  coverage  - Generate code coverage report"
	@echo "  docs      - Generate documentation"
	@echo "  install   - Install library and headers"
	@echo "  help      - Show this help"

# Dependencies (simplified)
$(BUILD_DIR)/logging_debug_core.o: $(INCLUDE_DIR)/logging_debug.h
$(BUILD_DIR)/logging_debug_symbols.o: $(INCLUDE_DIR)/logging_debug.h
$(BUILD_DIR)/logging_debug_outputs.o: $(INCLUDE_DIR)/logging_debug.h
$(BUILD_DIR)/test_logging_debug.o: $(INCLUDE_DIR)/logging_debug.h
